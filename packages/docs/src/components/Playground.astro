---
type Props = {
  url: string;
};

const defaultProps: Props = {
  url: 'https://demo.qumucloud.com/view/player-sdk-example',
};

const { url }: Props = {
  ...defaultProps,
  ...Astro.props
};
---

<input type="text" class="qi-form-control" id="url" value={url} aria-label="Presentation URL">

<iframe
    src={url}
    name="iframe1"
    allow="fullscreen"
    title="Qumu Cloud Player"
></iframe>

<div class="not-content playground__actions">
  <slot name="actions"/>
</div>

<div class="not-content">
  <slot name="events"/>
</div>

<style>
  input {
    margin-block: 1rem;
    width: 100%;
  }

  iframe {
    aspect-ratio: 16/9;
    border: none;
    border-radius: 2px;
    width: 100%;
  }

  .playground__actions {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
  }

  .playground__actions :global(hr) {
    display: block;
    width: 100%;
    opacity: 25%;
    margin: .5rem auto;
  }
</style>

<script>
  // lib is the player SDK offered by the `lib` package
  // Thanks to NPM workspaces, the packages are symlinked, so we can easily use them
  import { PlayerSdk } from 'lib';

  const iframe = document.querySelector('iframe');

  let sdk;
  let events = {};

  iframe.addEventListener('load', () => {
    sdk = initSdk();
  });

  document.getElementById('url').addEventListener('input', (event) => {
    sdk?.destroy();
    events = {};

    iframe.setAttribute('src', event.target.value);
  });

  function initSdk() {
    const playerSdk = new PlayerSdk(iframe);

    document.querySelectorAll('[data-type="event"]').forEach((element) => {
      const eventName = element.getAttribute('data-event');

      events[eventName] = (value) => {
        console.log(eventName, value);
      };

      if (element.checked) {
        playerSdk.addEventListener(eventName, events[eventName]);
      }
    });

    return playerSdk;
  }

  document.querySelectorAll('[data-type="get"]').forEach((element) => {
    element.addEventListener('click', () => {
      const commandName = element.getAttribute('data-command');

      sdk[commandName]().then((value) => console.log(commandName, value));
    });
  });

  document.querySelectorAll('[data-type="set"]').forEach((element) => {
    element.addEventListener('click', () => {
      const commandName = element.getAttribute('data-command');
      const value = element.getAttribute('data-value');

      sdk[commandName](value);
    });
  });

  document.querySelectorAll('[data-type="command"]').forEach((element) => {
    element.addEventListener('click', () => {
      const commandName = element.getAttribute('data-command');

      sdk[commandName]();
    });
  });

  document.querySelectorAll('[data-type="event"]').forEach((element) => {
    const eventName = element.getAttribute('data-event');

    element.addEventListener('change', (event) => {
      if (event.currentTarget.checked) {
        sdk.addEventListener(eventName, events[eventName]);
      } else {
        sdk.removeEventListener(eventName, events[eventName]);
      }
    });
  });
</script>
